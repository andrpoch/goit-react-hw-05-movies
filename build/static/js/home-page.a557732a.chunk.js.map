{"version":3,"file":"static/js/home-page.a557732a.chunk.js","mappings":"4LACA,EAAuB,wBAAvB,EAAsD,wB,SCGvC,SAASA,EAAT,GAA8B,IAAVC,EAAS,EAATA,OAC1BC,GAAWC,EAAAA,EAAAA,MACjB,OACG,wBACIF,EAAOG,KAAI,SAACC,GAAD,OACZ,eAAIC,UAAWC,EAAf,UACG,SAAC,KAAD,CACGD,UAAWC,EACXC,GAAI,CACDC,SAAS,UAAD,OAAYJ,EAAMK,IAC1BC,MAAO,CAAEC,KAAM,CAACV,SAAAA,KAJtB,SAMIG,EAAMQ,SAPeR,EAAMK,W,kHCL5B,SAASI,IACrB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KAMA,OALAC,EAAAA,EAAAA,YAAU,YACPC,EAAAA,EAAAA,MAAgBC,MAAK,SAACC,GACnBJ,EAAUI,EAAKC,cAElB,KAEA,iCACG,2CACCpB,IAAU,SAAC,IAAD,CAAWA,OAAQA,S,oLCdjCqB,EAAU,mCACVC,EAAW,gCAAjB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAwBC,EAAxB,+BAA8B,GAAIC,EAAlC,+BAA2C,GAA3C,SACmBC,MAAMF,EAAKC,GAD9B,YACSE,EADT,QAEYC,GAFZ,iCAEuBD,EAAEE,OAFzB,gDAEkCC,QAAQC,OAAO,IAAIC,MAAM,kBAF3D,2GAKO,SAASf,IACb,OAAOM,EAAS,GAAD,OACTD,EADS,uCAC8BD,IAGzC,SAASY,EAAaC,GAC1B,OAAOX,EAAS,GAAD,OACTD,EADS,gCACuBD,EADvB,iCACuDa,EADvD,gCAIX,SAASC,EAAcC,GACzB,OAAOb,EAAS,GAAD,OACTD,EADS,iBACQc,EADR,oBAC2Bf,EAD3B,oBAIb,SAASgB,EAAcD,GACzB,OAAOb,EAAS,GAAD,OACTD,EADS,iBACQc,EADR,4BACmCf,EADnC,oBAIb,SAASiB,EAAaF,GACxB,OAAOb,EAAS,GAAD,OACXD,EADW,iBACMc,EADN,4BACiCf,EADjC","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.js","pages/HomePage.js","services/themoviedbApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MovieList_item__tDivI\",\"link\":\"MovieList_link__+cn-g\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport s from './MovieList.module.css'; \n\nexport default function MovieList({movies}) {\n   const location = useLocation();\n   return (\n      <ul>\n         {movies.map((movie)=>(\n         <li className={s.item} key={movie.id}>\n            <Link\n               className={s.link}\n               to={{\n                  pathname: `movies/${movie.id}`,\n                  state: { from: {location,},},\n               }}>\n               {movie.title}\n            </Link>\n         </li>\n         ))}\n      </ul>\n   )\n};\nMovieList.propTypes = {\n   movies: PropTypes.array.isRequired,\n}","import { useState, useEffect } from 'react';\nimport { fetchTrending } from 'services/themoviedbApi';\nimport MovieList from 'components/MovieList/MovieList';\n\nexport default function HomePage() {\n   const [movies, setMovies] = useState([]);\n   useEffect(() => {\n      fetchTrending().then((data) => {\n         setMovies(data.results)\n      })\n   }, []);\n   return (\n      <>\n         <h2>Trending Today</h2>\n         {movies && <MovieList movies={movies}/>}\n      </>\n   )\n};\n","const API_KEY = 'f93b01b73c44b40ba53413c6e5601742';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nasync function fetchUrl(url = '', config = {}) {\n   const r = await fetch(url, config);\n   return r.ok ? await r.json() : Promise.reject(new Error('Nothing found'));\n};\n\nexport function fetchTrending () {\n   return fetchUrl(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n   );\n};\nexport function fetchSearch (searchQuery) {\n   return fetchUrl(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n   );\n};\nexport function fetchDetails (movieId) {\n     return fetchUrl(\n        `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n   );\n};\nexport function fetchCredits (movieId) {\n     return fetchUrl(\n        `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n   );\n};\nexport function fetchReviews(movieId) {\n     return fetchUrl(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n   );\n};\n\n\n"],"names":["MovieList","movies","location","useLocation","map","movie","className","s","to","pathname","id","state","from","title","HomePage","useState","setMovies","useEffect","fetchTrending","then","data","results","API_KEY","BASE_URL","fetchUrl","url","config","fetch","r","ok","json","Promise","reject","Error","fetchSearch","searchQuery","fetchDetails","movieId","fetchCredits","fetchReviews"],"sourceRoot":""}